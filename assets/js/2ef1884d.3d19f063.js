"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2339],{2410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>w,default:()=>C,frontMatter:()=>j,metadata:()=>v,toc:()=>_});var s=n(4848),a=n(8453),r=n(7838),o=n(634),i=n(3075),c=n(8104),d=n(7396),l=n(1584),p=n(3252),h=n(2301),u=n(6885),g=n(576),b=n(5381),m=n(3042),f=n(1432);const x='<Cabbage>\n[\n    {"type": "form", "caption": "Button Example", "size": {"width": 380, "height": 300}, "pluginId": "def1"},\n    {\n        "type": "button",\n        "bounds": {"left": 16, "top": 12, "width": 117, "height": 30},\n        "channels": [{"id": "trigger", "event": "valueChanged"}],\n        "text": {"off": "Start Synth", "on": "Stop Synth"},\n        "corners": 2\n    },\n    {\n        "type": "button",\n        "bounds": {"left": 146, "top": 12, "width": 80, "height": 30},\n        "channels": [{"id": "mute", "event": "valueChanged"}],\n        "text": {"off": "Unmute", "on": "Mute"},\n        "corners": 2\n    },\n    {\n        "type": "button",\n        "channels": [{"id": "toggleFreq", "event": "valueChanged"}],\n        "bounds": {"left": 240, "top": 12, "width": 121, "height": 30},\n        "text": {"off": "Toggle Freq", "on": "Toggle Freq"},\n        "colour": {"off": {"fill": "#ff0000", "stroke": "#000000"}, "on": {"fill": "#0295cf", "stroke": "#000000"}}\n    }\n]\n</Cabbage>\n<CsoundSynthesizer>\n<CsOptions>\n-n -d -+rtmidi=NULL -M0 -m0d\n</CsOptions>\n<CsInstruments>\n; Initialize the global variables.\nksmps = 32\nnchnls = 2\n0dbfs = 1\n\n; Rory Walsh 2021\n;\n; License: CC0 1.0 Universal\n; You can copy, modify, and distribute this file,\n; even for commercial purposes, all without asking permission.\n\ninstr 1\n\n    kVal, kTrig = cabbageGetValue("trigger")\n\n    if kTrig == 1 then\n        if kVal == 1 then\n            event("i", "Synth", 0, 3600)\n        else\n            iInstrNum = nstrnum("Synth")\n            turnoff2(iInstrNum, 0, 0)\n        endif\n    endif\n    \nendin\n\ninstr Synth\n    prints("Starting Synth")   \n    kMute = cabbageGetValue("mute")\n    a1 = oscili(.5*kMute, 300*(cabbageGetValue("toggleFreq")+1))\n    outs(a1, a1)\nendin\n\n\n\n</CsInstruments>\n<CsScore>\n;starts instrument 1 and runs it for a week\ni1 0 z\n</CsScore>\n</CsoundSynthesizer>',j={},w="Button",v={id:"cabbage_widgets/button",title:"Button",description:'button creates a button on screen that can be used for a whole range of tasks. The "channel" string identifies the channel on which Cabbage will communicate with Csound. The on and off text strings determine the text that will appear on the button as users toggle between two states, i.e., 0 or 1. By default these captions are set to "On" and "Off" but the user can specify any strings they wish.',source:"@site/docs/cabbage_widgets/button.mdx",sourceDirName:"cabbage_widgets",slug:"/cabbage_widgets/button",permalink:"/cabbage3docs/docs/cabbage_widgets/button",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/button.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Form",permalink:"/cabbage3docs/docs/cabbage_widgets/form"},next:{title:"ComboBox",permalink:"/cabbage3docs/docs/cabbage_widgets/combobox"}},y={},_=[{value:"Common Properties",id:"common-properties",level:3},{value:"Active",id:"active",level:4},...u.toc,{value:"Automatable",id:"automatable",level:4},...o.toc,{value:"Bounds",id:"bounds",level:4},...p.toc,{value:"Channel",id:"channel",level:4},...r.toc,{value:"Colour",id:"colour",level:4},...i.toc,{value:"Corners",id:"corners",level:4},...b.toc,{value:"Font",id:"font",level:4},...l.toc,{value:"Opacity",id:"opacity",level:4},...c.toc,{value:"Id",id:"id",level:4},...g.toc,{value:"Text",id:"text",level:4},...m.toc,{value:"Value",id:"value",level:4},...d.toc,{value:"Visible",id:"visible",level:4},...h.toc,{value:"Example",id:"example",level:2}];function k(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"button",children:"Button"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"button"}),' creates a button on screen that can be used for a whole range of tasks. The "channel" string identifies the channel on which Cabbage will communicate with Csound. The on and off text strings determine the text that will appear on the button as users toggle between two states, i.e., 0 or 1. By default these captions are set to "On" and "Off" but the user can specify any strings they wish.']}),"\n",(0,s.jsx)(t.h1,{id:"list-of-supported-properties",children:"List of supported properties"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"#active",children:"Active"})," | ",(0,s.jsx)(t.a,{href:"#automatable",children:"Automatable"})," | ",(0,s.jsx)(t.a,{href:"#bounds",children:"Bounds"})," | ",(0,s.jsx)(t.a,{href:"#channel",children:"Channel"})," | ",(0,s.jsx)(t.a,{href:"#colour",children:"Colour"})," | ",(0,s.jsx)(t.a,{href:"#corners",children:"Corners"})," | ",(0,s.jsx)(t.a,{href:"#font",children:"Font"})," |",(0,s.jsx)(t.a,{href:"id",children:"Id"})," | ",(0,s.jsx)(t.a,{href:"#opacity",children:"Opacity"})," | ",(0,s.jsx)(t.a,{href:"#text",children:"Text"})," | ",(0,s.jsx)(t.a,{href:"#value",children:"Value"})," | ",(0,s.jsx)(t.a,{href:"#visible",children:"Visible"})]}),"\n",(0,s.jsx)(t.h3,{id:"common-properties",children:"Common Properties"}),"\n",(0,s.jsx)("a",{id:"active",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"active",children:"Active"}),"\n",(0,s.jsx)(u.default,{}),"\n",(0,s.jsx)("a",{id:"automatable",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"automatable",children:"Automatable"}),"\n",(0,s.jsx)(o.default,{}),"\n",(0,s.jsx)("a",{id:"bounds",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"bounds",children:"Bounds"}),"\n",(0,s.jsx)(p.default,{}),"\n",(0,s.jsx)("a",{id:"channel",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"channel",children:"Channel"}),"\n",(0,s.jsx)(r.default,{}),"\n",(0,s.jsx)("a",{id:"colour",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"colour",children:"Colour"}),"\n",(0,s.jsx)(i.default,{}),"\n",(0,s.jsx)("a",{id:"corners",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"corners",children:"Corners"}),"\n",(0,s.jsx)(b.default,{}),"\n",(0,s.jsx)("a",{id:"font",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"font",children:"Font"}),"\n",(0,s.jsx)(l.default,{}),"\n",(0,s.jsx)("a",{id:"opacity",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"opacity",children:"Opacity"}),"\n",(0,s.jsx)(c.default,{}),"\n",(0,s.jsx)("a",{id:"id",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"id",children:"Id"}),"\n",(0,s.jsx)(g.default,{}),"\n",(0,s.jsx)("a",{id:"text",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"text",children:"Text"}),"\n",(0,s.jsx)(m.default,{}),"\n",(0,s.jsx)("a",{id:"value",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"value",children:"Value"}),"\n",(0,s.jsx)(d.default,{}),"\n",(0,s.jsx)("a",{id:"visible",className:"anchor-target"}),"\n",(0,s.jsx)(t.h4,{id:"visible",children:"Visible"}),"\n",(0,s.jsx)(h.default,{}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(f.A,{language:"csharp",children:x})]})}function C(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(k,{...e})}):k(e)}},6885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/active",title:"active",description:"Will deactivate a control if 0 is passed. Controls which are deactivated can still be updated from Csound.",source:"@site/docs/cabbage_widgets/properties/active.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/active",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/active",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/active.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"active": 0\n'})}),"\n",(0,s.jsx)(t.p,{children:"Will deactivate a control if 0 is passed. Controls which are deactivated can still be updated from Csound."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/automatable",title:"automatable",description:"Defaults to 1. Determines if a widget is automatable by a host DAW. Automatable widgets show up as plug-in parameters in the host. Non-automatable widgets can still communicate with Csound but are not accessible by the host. Note that hosts don't allow this parameter to change dynamically. If you change this setting, the plugin will need to be reloaded.",source:"@site/docs/cabbage_widgets/properties/automatable.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/automatable",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/automatable",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/automatable.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"automatable": 1\n'})}),"\n",(0,s.jsx)(t.p,{children:"Defaults to 1. Determines if a widget is automatable by a host DAW. Automatable widgets show up as plug-in parameters in the host. Non-automatable widgets can still communicate with Csound but are not accessible by the host. Note that hosts don't allow this parameter to change dynamically. If you change this setting, the plugin will need to be reloaded."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/bounds",title:"bounds",description:"Integer values that set position and size on screen(in pixels).",source:"@site/docs/cabbage_widgets/properties/bounds.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/bounds",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/bounds",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/bounds.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"bounds": {"left":0, "top":0, "width":100, "height":100}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Integer values that set position and size on screen(in pixels)."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7838:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/channel",title:"channel",description:"In Cabbage 3, widgets use an array of channels instead of a single channel string. Each channel object includes an id that defines a unique channel name. Widgets in Cabbage 3 can have any number of channels attached to them. An optional eventType property specifies the type of interaction. A range object can define the minimum, maximum, and default values, along with the skew and step increment.",source:"@site/docs/cabbage_widgets/properties/channel.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/channel",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/channel",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/channel.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={blockquote:"blockquote",code:"code",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"channels": [\n                {\n                    "id":"channelName", \n                    "eventType": "valueChanged",\n                    "range": {"min":0, "max":100, "value":0, "skew":1, "incr":0.1}\n                }\n            ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"In Cabbage 3, widgets use an array of channels instead of a single channel string. Each channel object includes an id that defines a unique channel name. Widgets in Cabbage 3 can have any number of channels attached to them. An optional eventType property specifies the type of interaction. A range object can define the minimum, maximum, and default values, along with the skew and step increment."}),"\n",(0,s.jsx)(t.p,{children:"If range is omitted, it defaults to a range from 0 to 1, with increments of 0.001 for widgets that use drag events (e.g., sliders, XY pads) and 1 for widgets that use click or toggle events (e.g., buttons, checkboxes)."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"A widget\u2019s top-level id property defines the general communication channel for updating attributes, while the channels specified in the channels array are used for value and parameter updates."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Supported event types:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Event"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"valueChanged (default)"})}),(0,s.jsx)(t.td,{children:"Tracks simple value changes"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mousePressLeft"})}),(0,s.jsx)(t.td,{children:"Tracks presses of left mouse button"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mousePressRight"})}),(0,s.jsx)(t.td,{children:"Tracks presses of right mouse button"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mousePressMiddle"})}),(0,s.jsx)(t.td,{children:"Tracks presses of middle mouse button"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseMoveX"})}),(0,s.jsx)(t.td,{children:"Tracks movement along X axis."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseMoveY"})}),(0,s.jsx)(t.td,{children:"Tracks movement along Y axis."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseDragX"})}),(0,s.jsx)(t.td,{children:"Tracks movement along X axis with mouse pressed"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseDragY"})}),(0,s.jsx)(t.td,{children:"Tracks movement along Y axis with mouse pressed"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"mouseInside"})}),(0,s.jsx)(t.td,{children:"Returns max when any mouse button is within the bounds of the widget, min if outside."})]})]})]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"In Cabbage 3, channels don't need to start with a letter, and white spaces are permitted."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/colourButton",title:"colourButton",description:'This property sets the main colour of a button. Colour properties themselves can be any valid CSS or HTML color string. They can also accepts be hexadecimal strings, or RGB / RGBA array, where each channel ranges from 0 to 255. For example, "colour"{"fill"{"on"""#ff0000"}}.',source:"@site/docs/cabbage_widgets/properties/colourButton.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/colourButton",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/colourButton",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/colourButton.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"colour": {\n    "on": {\n        "fill": "#0295cf",\n        "stroke": {\n            "colour": "#dddddd",\n            "width": 2\n        }\n    },\n    "off": {\n        "fill": "#a8d388",\n        "stroke": {\n            "colour": "#dddddd",\n            "width": 2\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This property sets the main colour of a button. Colour properties themselves can be any valid CSS or HTML color string. They can also accepts be hexadecimal strings, or RGB / RGBA array, where each channel ranges from 0 to 255. For example, ",(0,s.jsx)(t.code,{children:'"colour":{"on":{"fill":[0, 0, 255]}}'})," or ",(0,s.jsx)(t.code,{children:'"colour":{"on":{"fill":""#ff0000"}}'}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"stroke"})," object set the outline colour and buttons."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5381:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/corners",title:"corners",description:"Sets the radius size of the widget's corners.",source:"@site/docs/cabbage_widgets/properties/corners.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/corners",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/corners",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/corners.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"corners": 5\n'})}),"\n",(0,s.jsx)(t.p,{children:"Sets the radius size of the widget's corners."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/font",title:"font",description:"Sets the font size, family, colour and font alignment of the widget, where applicable.",source:"@site/docs/cabbage_widgets/properties/font.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/font",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/font",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/font.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"font": {\n    "family": "Verdana",\n    "size": 0,\n    "align": "centre",\n    "colour":"#ff0000"\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Sets the font size, family, colour and font alignment of the widget, where applicable."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/id",title:"id",description:"This optional channel can be used to define a top-level line of communication between the instrument\u2019s UI and Csound. It is reserved for UI updates only. If omitted, it defaults to the first id from the channels array. Its primary purpose is to help produce clearer code, especially for widgets with multiple channels.",source:"@site/docs/cabbage_widgets/properties/id.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/id",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/id",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/id.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"id": "widgetId"\n'})}),"\n",(0,s.jsx)(t.p,{children:"This optional channel can be used to define a top-level line of communication between the instrument\u2019s UI and Csound. It is reserved for UI updates only. If omitted, it defaults to the first id from the channels array. Its primary purpose is to help produce clearer code, especially for widgets with multiple channels."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/opacity",title:"opacity",description:"The opacity attribute property can vary between 0 (fully transparent) and 1 (fully opaque).",source:"@site/docs/cabbage_widgets/properties/opacity.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/opacity",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/opacity",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/opacity.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"opacity": 1\n'})}),"\n",(0,s.jsx)(t.p,{children:"The opacity attribute property can vary between 0 (fully transparent) and 1 (fully opaque)."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3042:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/textOnOff",title:"textOnOff",description:"One string for on and one for off.",source:"@site/docs/cabbage_widgets/properties/textOnOff.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/textOnOff",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/textOnOff",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/textOnOff.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"text":{ "on":"string", "off":"string" }\n'})}),"\n",(0,s.jsx)(t.p,{children:"One string for on and one for off."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},7396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/value",title:"value",description:"Value sets the initial state of the widget. In the case of a keyboard widget, it sets the leftmost key to appear.",source:"@site/docs/cabbage_widgets/properties/value.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/value",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/value",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/value.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"value":0\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Value sets the initial state of the widget. In the case of a ",(0,s.jsx)(t.code,{children:"keyboard"})," widget, it sets the leftmost key to appear."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},2301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=n(4848),a=n(8453);const r={},o=void 0,i={id:"cabbage_widgets/properties/visible",title:"visible",description:"A value of 0 will cause the widget to become invisible. Widgets have their visibility set to 1 by default.",source:"@site/docs/cabbage_widgets/properties/visible.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/visible",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/visible",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/visible.mdx",tags:[],version:"current",frontMatter:{}},c={},d=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"visible": 1\n'})}),"\n",(0,s.jsx)(t.p,{children:"A value of 0 will cause the widget to become invisible. Widgets have their visibility set to 1 by default."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);