"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5327],{2512:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>j,default:()=>T,frontMatter:()=>w,metadata:()=>v,toc:()=>_});var a=n(4848),s=n(8453),r=n(1584),i=n(576),o=n(7372),l=n(4909),c=n(8104),d=n(3252),p=n(2301),g=n(6885),b=n(4674),h=(n(481),n(9301),n(2312)),u=n(2730),m=n(472),f=n(1432);const x='<Cabbage>\r\n[\r\n    {\r\n        "type": "form",\r\n        "caption": "Gentable Example",\r\n        "size": {"width": 400, "height": 650},\r\n        "guiMode": "queue",\r\n        "pluginId": "def1"\r\n    },\r\n    {\r\n        "type": "genTable",\r\n        "bounds": {"left": 10, "top": 7, "width": 380, "height": 200},\r\n        "id": "gentable1",\r\n        "tableNumber": 1\r\n    },\r\n    {\r\n        "type": "horizontalSlider",\r\n        "bounds": {"left": 14, "top": 212, "width": 368, "height": 14},\r\n        "channels": [{"id": "harm1", "range": {"min": 0, "max": 1, "value": 1, "skew": 1, "increment": 0.01}}],\r\n        "text": "Harm1"\r\n    },\r\n    {\r\n        "type": "horizontalSlider",\r\n        "bounds": {"left": 14, "top": 244, "width": 368, "height": 14},\r\n        "channels": [{"id": "harm2", "range": {"min": 0, "max": 1, "value": 0, "skew": 1, "increment": 0.01}}],\r\n        "text": "Harm2"\r\n    },\r\n    {\r\n        "type": "horizontalSlider",\r\n        "bounds": {"left": 14, "top": 276, "width": 368, "height": 14},\r\n        "channels": [{"id": "harm3", "range": {"min": 0, "max": 1, "value": 0, "skew": 1, "increment": 0.01}}],\r\n        "text": "Harm3"\r\n    },\r\n    {\r\n        "type": "horizontalSlider",\r\n        "bounds": {"left": 14, "top": 308, "width": 368, "height": 14},\r\n        "channels": [{"id": "harm4", "range": {"min": 0, "max": 1, "value": 0, "skew": 1, "increment": 0.01}}],\r\n        "text": "Harm4"\r\n    },\r\n    {\r\n        "type": "horizontalSlider",\r\n        "bounds": {"left": 14, "top": 340, "width": 368, "height": 14},\r\n        "channels": [{"id": "harm5", "range": {"min": 0, "max": 1, "value": 0, "skew": 1, "increment": 0.01}}],\r\n        "text": "Harm5"\r\n    },\r\n    {\r\n        "type": "checkBox",\r\n        "bounds": {"left": 16, "top": 380, "width": 120, "height": 20},\r\n        "channels": [{"id": "normal"}],\r\n        "text": "Normalise",\r\n        "value": 1\r\n    },\r\n    {\r\n        "type": "checkBox",\r\n        "bounds": {"left": 140, "top": 380, "width": 120, "height": 20},\r\n        "channels": [{"id": "fill"}],\r\n        "text": "Fill Table",\r\n        "value": 1\r\n    }\r\n]\r\n</Cabbage>\r\n<CsoundSynthesizer>\r\n<CsOptions>\r\n-d -n -m0d\r\n</CsOptions>\r\n<CsInstruments>\r\n;sr is set by the host\r\nksmps \t\t= \t32\r\nnchnls \t\t= \t2\r\n0dbfs\t\t=\t1\r\n\r\n\r\n; Rory Walsh 2021\r\n; License: CC0 1.0 Universal\r\n; You can copy, modify, and distribute this file,\r\n; even for commercial purposes, all without asking permission.\r\ngiTable\tftgen\t1, 0,   1024, 10, 1\r\n\r\n\r\n//fill table with default values\r\nschedule("UpdateTable", 0, 0, 1, 0, 0, 0, 0, 0)\r\n\r\ninstr\t1\r\n    \r\n    ;toggle fill\r\n    kFill, kTrig = cabbageGetValue("fill")\r\n    cabbageSet(kTrig, "gentable1", "fill", kFill)\r\n\r\n    k1 = cabbageGetValue("harm1")\r\n    k2 = cabbageGetValue("harm2")\r\n    k3 = cabbageGetValue("harm3")\r\n    k4 = cabbageGetValue("harm4")\r\n    k5 = cabbageGetValue("harm5")\r\n    aEnv = linen(1, 1, p3, 1)\r\n    a1 = oscili(.2, 200, 1)\r\n    outs(a1, a1)\r\n\r\n    kChanged = changed(k1, k2, k3, k4, k5)\r\n    if kChanged==1 then\r\n        ;if a slider changes trigger instrument 2 to update table\r\n        event("i", "UpdateTable", 0, .01, k1, k2, k3, k4, k5)\r\n    endif\r\n    \r\nendin\r\n\r\ninstr UpdateTable\r\n    iNormal = (cabbageGetValue("normal")==0 ? -1 : 1)\r\n    giTable\t= ftgen(1, 0,   1024, 10*iNormal, p4, p5, p6, p7, p8)\r\n    cabbageSet("gentable1", "tableNumber", 1)\t; update table display\r\nendin\r\n\r\n</CsInstruments>\r\n<CsScore>\r\nf1 0 1024 10 1\r\ni1 0 [3600*24*7]\r\n</CsScore>\r\n</CsoundSynthesizer>\r\n',w={},j="GenTable",v={id:"cabbage_widgets/gentable",title:"GenTable",description:"genTable creates a table widget on screen that can be used to display the contents of a function table or the contents of a file. When selectableRegions is enabled, users can interactively select portions of the waveform by clicking and dragging. The start and end points can be picked up using the 'start' and 'end' channels. Note this widget is non-automatable. Therefore, its channels will not appear in a DAW as parameters. Setting a file will not write the contents of that file to the function table assigned with tableNumber. Such operations should be handled in Csound.",source:"@site/docs/cabbage_widgets/gentable.mdx",sourceDirName:"cabbage_widgets",slug:"/cabbage_widgets/gentable",permalink:"/cabbage3docs/docs/cabbage_widgets/gentable",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/gentable.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"ComboBox",permalink:"/cabbage3docs/docs/cabbage_widgets/combobox"},next:{title:"Groupbox",permalink:"/cabbage3docs/docs/cabbage_widgets/groupbox"}},y={},_=[{value:"Unique Properties",id:"unique-properties",level:3},{value:"Table Number",id:"table-number",level:4},...h.toc,{value:"Range",id:"range",level:4},...b.toc,{value:"Sample Range",id:"sample-range",level:4},...b.toc,{value:"Selectable Regions",id:"selectable-regions",level:4},...m.toc,{value:"Common Properties",id:"common-properties",level:3},{value:"Active",id:"active",level:4},...g.toc,{value:"Bounds",id:"bounds",level:4},...d.toc,{value:"Channel",id:"channel",level:4},...o.toc,{value:"Colour",id:"colour",level:4},...l.toc,{value:"Font",id:"font",level:4},...r.toc,{value:"Id",id:"id",level:4},...i.toc,{value:"Opacity",id:"opacity",level:4},...c.toc,{value:"Text",id:"text",level:4},...u.toc,{value:"Visible",id:"visible",level:4},...p.toc,{value:"Example",id:"example",level:2}];function k(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"gentable",children:"GenTable"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"genTable"})," creates a table widget on screen that can be used to display the contents of a function table or the contents of a file. When ",(0,a.jsx)(t.code,{children:"selectableRegions"})," is enabled, users can interactively select portions of the waveform by clicking and dragging. The start and end points can be picked up using the 'start' and 'end' channels. Note this widget is non-automatable. Therefore, its channels will not appear in a DAW as parameters. Setting a ",(0,a.jsx)(t.code,{children:"file"})," will not write the contents of that file to the function table assigned with ",(0,a.jsx)(t.code,{children:"tableNumber"}),". Such operations should be handled in Csound."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Note: Manually editing tables through mouse clicks is not currently supported in Cabbage 3."}),"\n"]}),"\n",(0,a.jsx)(t.h1,{id:"list-of-supported-properties",children:"List of supported properties"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"#active",children:"Active"})," | ",(0,a.jsx)(t.a,{href:"#bounds",children:"Bounds"})," | ",(0,a.jsx)(t.a,{href:"#channel",children:"Channel"})," | ",(0,a.jsx)(t.a,{href:"#colour",children:"Colour"})," | ",(0,a.jsx)(t.a,{href:"#font",children:"Font"})," |",(0,a.jsx)(t.a,{href:"#id",children:"Id"})," | ",(0,a.jsx)(t.a,{href:"#opacity",children:"Opacity"})," | ",(0,a.jsx)(t.a,{href:"#range",children:"Range"}),"| ",(0,a.jsx)(t.a,{href:"#sample",children:"Sample Range"})," | ",(0,a.jsx)(t.a,{href:"#selectableregions",children:"Selectable Regions"})," | ",(0,a.jsx)(t.a,{href:"#tablenumber",children:"Table Number"})," | ",(0,a.jsx)(t.a,{href:"#text",children:"Text"})," | ",(0,a.jsx)(t.a,{href:"#visible",children:"Visible"})]}),"\n",(0,a.jsx)(t.h3,{id:"unique-properties",children:"Unique Properties"}),"\n",(0,a.jsx)("a",{id:"tablenumber",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"table-number",children:"Table Number"}),"\n",(0,a.jsx)(h.default,{}),"\n",(0,a.jsx)("a",{id:"range",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"range",children:"Range"}),"\n",(0,a.jsx)(b.default,{}),"\n",(0,a.jsx)("a",{id:"sample",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"sample-range",children:"Sample Range"}),"\n",(0,a.jsx)(b.default,{}),"\n",(0,a.jsx)("a",{id:"selectableregions",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"selectable-regions",children:"Selectable Regions"}),"\n",(0,a.jsx)(m.default,{}),"\n",(0,a.jsx)(t.h3,{id:"common-properties",children:"Common Properties"}),"\n",(0,a.jsx)("a",{id:"active",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"active",children:"Active"}),"\n",(0,a.jsx)(g.default,{}),"\n",(0,a.jsx)("a",{id:"bounds",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"bounds",children:"Bounds"}),"\n",(0,a.jsx)(d.default,{}),"\n",(0,a.jsx)("a",{id:"channel",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"channel",children:"Channel"}),"\n",(0,a.jsx)(o.default,{}),"\n",(0,a.jsx)("a",{id:"colour",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"colour",children:"Colour"}),"\n",(0,a.jsx)(l.default,{}),"\n",(0,a.jsx)("a",{id:"font",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"font",children:"Font"}),"\n",(0,a.jsx)(r.default,{}),"\n",(0,a.jsx)("a",{id:"id",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"id",children:"Id"}),"\n",(0,a.jsx)(i.default,{}),"\n",(0,a.jsx)("a",{id:"opacity",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"opacity",children:"Opacity"}),"\n",(0,a.jsx)(c.default,{}),"\n",(0,a.jsx)("a",{id:"text",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"text",children:"Text"}),"\n",(0,a.jsx)(u.default,{}),"\n",(0,a.jsx)("a",{id:"visible",class:"anchor-target"}),"\n",(0,a.jsx)(t.h4,{id:"visible",children:"Visible"}),"\n",(0,a.jsx)(p.default,{}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(f.A,{language:"csharp",children:x})]})}function T(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(k,{...e})}):k(e)}},6885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/active",title:"active",description:"Will deactivate a control if 0 is passed. Controls which are deactivated can still be updated from Csound.",source:"@site/docs/cabbage_widgets/properties/active.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/active",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/active",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/active.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"active": 0\n'})}),"\n",(0,a.jsx)(t.p,{children:"Will deactivate a control if 0 is passed. Controls which are deactivated can still be updated from Csound."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},3252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/bounds",title:"bounds",description:"Integer values that set position and size on screen(in pixels).",source:"@site/docs/cabbage_widgets/properties/bounds.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/bounds",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/bounds",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/bounds.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"bounds": {"left":0, "top":0, "width":100, "height":100}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Integer values that set position and size on screen(in pixels)."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7372:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/channelGentable",title:"channelGentable",description:"",source:"@site/docs/cabbage_widgets/properties/channelGentable.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/channelGentable",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/channelGentable",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/channelGentable.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:'```json\n## `channel()`\n\n`channel()` is used to define the channels for selectable region output on the genTable widget. It accepts an object with properties for start position and length:\n\n```javascript\nchannel({ start: "channelName1", length: "channelName2" })\n```\n\n- **start**: Channel that receives the starting sample position of the selected region (integer)\n- **length**: Channel that receives the length of the selected region in samples (integer)\n\nWhen a user selects a region on the genTable, the widget sends the start position and length to the specified channels as sample indices. These can be directly used in Csound to access the corresponding portion of the function table.\n\n### Example Usage\n\n```javascript\ngentable({\n    bounds: {left: 10, top: 10, width: 600, height: 200},\n    channel: {start: "region_start", length: "region_length"},\n    tableNumber: 1,\n    selectableRegions: true\n})\n```\n\nIn your Csound code:\n\n```csound\nkRegionStart cabbageGetValue "region_start"\nkRegionLength cabbageGetValue "region_length"\n\n; Use the sample positions directly\nkSample = 0\nwhile kSample < kRegionLength do\n    kValue table kRegionStart + kSample, giTable1\n    ; Process the sample...\n    kSample += 1\nod\n```\n```\nDefines the channel configuration for the genTable widget:\n- **id**: Unique identifier for the genTable widget itself. Use this channel with `cabbageSet` to update any of the genTable\'s attributes.\n- **start**: Channel name for the selection start position (normalized 0-1). This channel is updated when the user selects a region on the waveform (only when `selectableRegions` is enabled)\n- **length**: Channel name for the selection length (normalized 0-1). This channel is updated when the user selects a region on the waveform (only when `selectableRegions` is enabled)\n\nThe start and length channels are only used when `selectableRegions` is enabled. Values are normalized (0-1) representing positions within the visible range of the table, regardless of the actual sample count. You can read these values in your Csound code using `cabbageGetValue` and convert them to sample positions using the table size.\n\n**Example usage in Csound:**\n```csound\nkRegionStart cabbageGetValue "region_start"\nkRegionLength cabbageGetValue "region_length"\nkTableSize = ftlen(giTable1)\nkStartSample = kRegionStart * kTableSize\nkLengthSamples = kRegionLength * kTableSize\n; Process the selected region...\n```\n\n'})})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/colourGentable",title:"colourGentable",description:'Colour properties can be any valid CSS or HTML color string. They can also accepts be hexadecimal strings, or RGB / RGBA array, where each channel ranges from 0 to 255. For example, "colour"[0, 0, 255]} or "colour"""#ff0000"}. fill sets the table colour, while stroke.outline sets the outline colour.',source:"@site/docs/cabbage_widgets/properties/colourGentable.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/colourGentable",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/colourGentable",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/colourGentable.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"colour": {\n    "fill": "#a8d388",\n    "stroke": {\n        "colour": "#dddddd",\n        "width": 1\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Colour properties can be any valid CSS or HTML color string. They can also accepts be hexadecimal strings, or RGB / RGBA array, where each channel ranges from 0 to 255. For example, ",(0,a.jsx)(t.code,{children:'"colour":{"fill":[0, 0, 255]}'})," or ",(0,a.jsx)(t.code,{children:'"colour":{"fill":""#ff0000"}'}),". ",(0,a.jsx)(t.code,{children:"fill"})," sets the table colour, while ",(0,a.jsx)(t.code,{children:"stroke.outline"})," sets the outline colour."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},481:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/file",title:"file",description:"This identifier is used across a number of widgets.",source:"@site/docs/cabbage_widgets/properties/file.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/file",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/file",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/file.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={blockquote:"blockquote",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"file": "filename"\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This identifier is used across a number of widgets.\n",(0,a.jsx)(t.code,{children:"combobox"})," and ",(0,a.jsx)(t.code,{children:"listbox"})," - will load lines from a file as selectable items.\n",(0,a.jsx)(t.code,{children:"gentable"})," and ",(0,a.jsx)(t.code,{children:"soundfiler"})," - will load a sound file to display\n",(0,a.jsx)(t.code,{children:"image"})," - will load an iamge to display (PNG/JPG/SVG)\n",(0,a.jsx)(t.code,{children:"infobutton"})," - sets the file to display when the button is clicked This can be a local html file, or a URL.\n",(0,a.jsx)(t.code,{children:"texteditor"})," - sets the file to load, should be a text file.\nIf a full file path is not given, file() will search in the current directory, i.e., the directory that contains the csd file that is open. It is best to keep all files in the same directory as your csd file. If you wish to keep them in a separate folder use relative paths, i.e, ",(0,a.jsx)(t.code,{children:"../../folder"}),"."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Avoid absolute path at all costs. Failure to do so will most likely problems with your instruments as soon as you share them."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/font",title:"font",description:"Sets the font size, family, colour and font alignment of the widget, where applicable.",source:"@site/docs/cabbage_widgets/properties/font.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/font",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/font",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/font.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"font": {\n    "family": "Verdana",\n    "size": 0,\n    "align": "centre",\n    "colour":"#ff0000"\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Sets the font size, family, colour and font alignment of the widget, where applicable."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/id",title:"id",description:"This optional channel can be used to define a top-level line of communication between the instrument\u2019s UI and Csound. It is reserved for UI updates only. If omitted, it defaults to the first id from the channels array. Its primary purpose is to help produce clearer code, especially for widgets with multiple channels.",source:"@site/docs/cabbage_widgets/properties/id.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/id",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/id",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/id.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"id": "widgetId"\n'})}),"\n",(0,a.jsx)(t.p,{children:"This optional channel can be used to define a top-level line of communication between the instrument\u2019s UI and Csound. It is reserved for UI updates only. If omitted, it defaults to the first id from the channels array. Its primary purpose is to help produce clearer code, especially for widgets with multiple channels."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/opacity",title:"opacity",description:"The opacity attribute property can vary between 0 (fully transparent) and 1 (fully opaque).",source:"@site/docs/cabbage_widgets/properties/opacity.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/opacity",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/opacity",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/opacity.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"opacity": 1\n'})}),"\n",(0,a.jsx)(t.p,{children:"The opacity attribute property can vary between 0 (fully transparent) and 1 (fully opaque)."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},9301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/rangeGenTable",title:"rangeGenTable",description:"Defines the range for the Y axis in a genTable widget.",source:"@site/docs/cabbage_widgets/properties/rangeGenTable.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/rangeGenTable",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/rangeGenTable",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/rangeGenTable.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"range": {\n    "min": -1,\n    "max": 1\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Defines the range for the Y axis in a ",(0,a.jsx)(t.code,{children:"genTable"})," widget."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"min"}),": Minimum value to be displayed (required)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"max"}),": Maximum value to be displayed (required)"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},4674:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/sampleRange",title:"sampleRange",description:"This property sets the visible range of samples in a gentable. You can adjust these properties in real-time to enable zooming.",source:"@site/docs/cabbage_widgets/properties/sampleRange.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/sampleRange",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/sampleRange",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/sampleRange.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"range": {"start":0, "end":-1}\n'})}),"\n",(0,a.jsx)(t.p,{children:"This property sets the visible range of samples in a gentable. You can adjust these properties in real-time to enable zooming."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/selectableRegions",title:"selectableRegions",description:"",source:"@site/docs/cabbage_widgets/properties/selectableRegions.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/selectableRegions",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/selectableRegions",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/selectableRegions.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:'```json\n"selectableRegions": true\n```\n\nWhen enabled, users can click and drag on the waveform to select a region of samples. The selected region is highlighted with a semi-transparent overlay.\n\n**Behavior:**\n- **Click and drag**: Select a region by clicking on the waveform and dragging to define the selection boundaries\n- **Click without drag**: Clicking without dragging (less than 3 pixels of movement) clears the current selection\n- **Visual feedback**: Selected regions are shown with a semi-transparent overlay\n- **Channel output**: When a region is selected, the start and end sample indices are automatically sent to Csound via the configured channels (see `channelGentable`)\n\nThis feature is useful for selecting portions of audio for processing, looping, or analysis.\n\n'})})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},2312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/tableNumber",title:"tableNumber",description:"Sets the function table to be displayed by the genTable widget.",source:"@site/docs/cabbage_widgets/properties/tableNumber.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/tableNumber",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/tableNumber",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/tableNumber.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"tableNumber": 1\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Sets the function table to be displayed by the ",(0,a.jsx)(t.code,{children:"genTable"})," widget."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},2730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/text",title:"text",description:'"string" will be the text that appears on the widget.',source:"@site/docs/cabbage_widgets/properties/text.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/text",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/text",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/text.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"text": "string"\n'})}),"\n",(0,a.jsx)(t.p,{children:'"string" will be the text that appears on the widget.'})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},2301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(4848),s=n(8453);const r={},i=void 0,o={id:"cabbage_widgets/properties/visible",title:"visible",description:"A value of 0 will cause the widget to become invisible. Widgets have their visibility set to 1 by default.",source:"@site/docs/cabbage_widgets/properties/visible.mdx",sourceDirName:"cabbage_widgets/properties",slug:"/cabbage_widgets/properties/visible",permalink:"/cabbage3docs/docs/cabbage_widgets/properties/visible",draft:!1,unlisted:!1,editUrl:"https://github.com/rorywalsh/cabbage3docs/tree/main/docs/cabbage_widgets/properties/visible.mdx",tags:[],version:"current",frontMatter:{}},l={},c=[];function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'"visible": 1\n'})}),"\n",(0,a.jsx)(t.p,{children:"A value of 0 will cause the widget to become invisible. Widgets have their visibility set to 1 by default."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);